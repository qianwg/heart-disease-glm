####reformate the data####
library(reshape2)
stroke=melt(stroke_wide, id.vars=c("Subject", "Group"))
###read data#### local or web####
stroke_wide=read.csv("http://my.ilstu.edu/~mxu2/spring-2018/MAT355/stoke.csv")
library(nlme)
####reformate the data####
library(reshape2)
install.packages("reshape")
install.packages(reshape2)
install.packages("reshape2")
###read data#### local or web####
stroke_wide=read.csv("http://my.ilstu.edu/~mxu2/spring-2018/MAT355/stoke.csv")
library(nlme)
####reformate the data####
library(reshape2)
stroke=melt(stroke_wide, id.vars=c("Subject", "Group"))
stroke
ventricular=melt(ventricular, id.vars=c("Subject", "Dog", "Type"))
ventricular
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
library(reshape2)
library(ggplot2)
ventricular <- read.csv("C:/Users/bbecerra/Downloads/ventricular.csv")
colnames(ventricular) <- c("Subject", "Dog", "Type", "Condition 1", "Condition 2", "Condition 3", "Condition 4", "Condition 5", "Condition 6", "Condition 7", "Condition 8")
melted_ventricular=melt(ventricular, id.vars=c("Subject", "Dog", "Type"))
ggplot(data = melted_ventricular, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
melted_ventricular
ggplot(data = melted_ventricular, aes(x=variable, y=variable, fill=value)) +
geom_tile()
cormat <- round(cor(ventricular),2)
cormat <- round(cor(ventricular[,3:]),2)
cormat <- round(cor(ventricular[,3:11]),2)
head(cormat)
ventricular[,3:11]
ventricular[,3:12]
ventricular[,4:12]
ventricular[,4:11]
cormat <- round(cor(ventricular[,4:11]),2)
cormat <- round(cor(ventricular[,4:11]),2)
melted_cormat <- melt(cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "blue",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(0,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0.5, limit = c(0,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
###read data#### local or web####
stroke_wide=read.csv("http://my.ilstu.edu/~mxu2/spring-2018/MAT355/stoke.csv")
library(nlme)
####reformate the data####
library(reshape2)
stroke=melt(stroke_wide, id.vars=c("Subject", "Group"))
stroke$ability=stroke$value
stroke$time=as.numeric(stroke$variable)
stroke
#
# b) Independent Model
#
ind<-corIdent(form = ~ 1 | Subject)
melted_ventricular
#
# b) Independent Model
#
ind<-corIdent(form = ~ 1 | Subject)
gls.ind<-gls(value~Type+variable+Type*variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
gls.ind<-gls(value~Type+variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
#
# b) Independent Model - How to compare using data reduction approach?
# Pooled analysis
#
ind<-corIdent(form = ~ 1 | Subject)
gls.ind<-gls(value~Subject+variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
ind<-corIdent(form = ~ 1 | Type)
gls.ind<-gls(value~Type+variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
#
# b) Independent Model - How to compare using data reduction approach?
# Pooled analysis
#
ind<-corIdent(form = ~ 1 | Subject)
gls.ind<-gls(value~variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
ind<-corIdent(form = ~ 1 | Type)
gls.ind<-gls(value~variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
#
# b) Independent Model - How to compare using data reduction approach?
# Pooled analysis
#
ind<-corIdent(form = ~ 1 | Subject)
gls.indSubject<-gls(value~variable, data=melted_ventricular,correlation=ind)
summary(gls.indSubject)
ind<-corIdent(form = ~ 1 | Type)
gls.indType<-gls(value~variable, data=melted_ventricular,correlation=ind)
summary(gls.indType)
gls.indSubject$coefficients
gls.indSubject$sigma
gls.indSubject$varBeta
summary(gls.indSubject)
summary(gls.indType)
summary(gls.indSubject)
#
# b) Independent Model
# Pooled analysis
#
# Daa reduction - Independent
ind<-corIdent(form = ~ 1 | Subject)
gls.indSubject<-gls(value~Type + variable, data=melted_ventricular,correlation=ind)
summary(gls.indSubject)
# Pooled - Independent
ind<-corIdent(form = ~ 1 | Type)
gls.indType<-gls(value~Type + variable, data=melted_ventricular,correlation=ind)
summary(gls.indType)
#
# c)
#
library(nlme)
random_eff<-lme(value~Type+variable+Type*variable,data=melted_ventricular,random=~1|Subject)
summary(random_eff)
random_eff<-lme(value~Type+variable+Type*variable,data=melted_ventricular,random=~1|Subject)
summary(random_eff)
random_eff1<-lme(value~Type+variabe+Type*variable,data=melted_ventricular,random=~1|Subject,cor=corAR1())
summary(random_eff1)
random_eff1<-lme(value~Type+variable+Type*variable,data=melted_ventricular,random=~1|Subject,cor=corAR1())
summary(random_eff1)
random_eff2<-lme(value~Type,data=melted_ventricular,random=~1|Subject/Type)   ###group nested in the subject
summary(random_eff2)
random_eff3<-lme(value~Type*variable,data=melted_ventricular,random=list(~1|Subject, ~1|Group))   ###group nested in the subject
summary(random_eff3)
random_eff3<-lme(value~Type*variable,data=melted_ventricular,random=list(~1|Subject, ~1|Type))   ###group nested in the subject
summary(random_eff3)
AIC(random_eff)
AIC(random_eff, random_eff1, random_eff2, random_eff3)
chosen_random_eff <- random_eff1
selected_random_eff <- random_eff1
#
# d) GEE Models
#
library(geepack)
gee.ind<-geeglm(value~Type+variable+Type*variable,family=gaussian, data=melted_ventricular,id=Subject,wave=variable,corst="independence")
install.packages("geepack")
gee.ind<-geeglm(value~Type+variable+Type*variable,family=gaussian, data=melted_ventricular,id=Subject,wave=variable,corst="independence")
summary(gee.ind)
#
# d) GEE Models
#
library(geepack)
gee.ind<-geeglm(value~Type+variable+Type*variable,family=gaussian, data=melted_ventricular,id=Subject,wave=variable,corst="independence")
summary(gee.ind)
AIC(gee.ind)
gee.exch<-geeglm(value~Type+variable+Type*variable,family=gaussian,data=melted_ventricular,id=Subject,wave=variable,corst="exchangeable")
summary(gee.exch)
gee.ar1<-geeglm(value~Type+variable+Type*variable,family=gaussian,data=melted_ventricular,id=Subject,wave=variabke,corst="ar1")
summary(gee.ar1)
gee.ar1<-geeglm(value~Type+variable+Type*variable,family=gaussian,data=melted_ventricular,id=Subject,wave=variable,corst="ar1")
summary(gee.ar1)
anova(gee.ind,gee.exch, gee.ar1)
anova(gee.ind,gee.exch)
anova(gee.ind,gee.exch,gee.ar1)
summary(gee.ind)
AIC(gee.ind)
gee.ind$coefficients
summary(gls.indType)
summary(gls.indSubject)
summary(selected_random_eff)
summary(gee.ind)
#
# b) Independent Model
# Pooled analysis
#
# Daa reduction - Independent
ind<-corIdent(form = ~ 1 | Subject)
gls.indSubject<-gls(value~Type + variable, data=melted_ventricular,correlation=ind)
summary(gls.indSubject)
# Pooled - Independent
ind<-corIdent(form = ~ 1 | Type)
gls.indType<-gls(value~Type + variable, data=melted_ventricular,correlation=ind)
summary(gls.indType)
#
# c) Random effect models
#
library(nlme)
random_eff<-lme(value~Type+variable+Type*variable,data=melted_ventricular,random=~1|Subject)
summary(random_eff)
random_eff1<-lme(value~Type+variable+Type*variable,data=melted_ventricular,random=~1|Subject,cor=corAR1())
summary(random_eff1)
random_eff2<-lme(value~Type,data=melted_ventricular,random=~1|Subject/Type)   ###group nested in the subject
summary(random_eff2)
random_eff3<-lme(value~Type*variable,data=melted_ventricular,random=list(~1|Subject, ~1|Type))   ###group nested in the subject
summary(random_eff3)
summary(random_eff)
summary(random_eff)
summary(random_eff1)
summary(random_eff2)
summary(random_eff3)
AIC(random_eff, random_eff1, random_eff2, random_eff3)
#
# d) GEE Models
#
library(geepack)
gee.ind<-geeglm(value~Type+variable+Type*variable,family=gaussian, data=melted_ventricular,id=Subject,wave=variable,corst="independence")
summary(gee.ind)
gee.exch<-geeglm(value~Type+variable+Type*variable,family=gaussian,data=melted_ventricular,id=Subject,wave=variable,corst="exchangeable")
summary(gee.exch)
gee.ar1<-geeglm(value~Type+variable+Type*variable,family=gaussian,data=melted_ventricular,id=Subject,wave=variable,corst="ar1")
summary(gee.ar1)
summary(gee.ind)
e
summary(gee.exch)
summary(gee.ar1)
summary(gee.ar1)
summary(gee.exch)
summary(gee.ind)
summary(gee.ind)
summary(gee.exch)
summary(gee.ar1)
anova(gee.ind,gee.exch,gee.ar1)
gee.ind
summary(gee.ar1)
summary(gee.ar1)
summary(gee.exch)
summary(gee.ind)
library(foreign)
library(ggplot2)
library(MASS)
library(Hmisc)
library(reshape2)
library(VGAM)
library(sure)
library(ordinal)
library(brglm2)
library(tidyverse)
setwd("C:/Users/bbecerra/Documents/Git-Projects/heart-disease-glm")
formatProcessedClevelandData <- function() {
processed.cleveland <- read.csv("data/processed.cleveland.data")
colnames(processed.cleveland) <- c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
processed.cleveland <- as.data.frame(apply(processed.cleveland, 2, as.numeric))
processed.cleveland <- as.data.frame(sapply(processed.cleveland,function(cols) {
if(is.numeric(cols)) ifelse(is.na(cols),median(cols,na.rm=T),cols) else cols}))
return(processed.cleveland)
}
# TODO
formatUnprocessedClevelandData <- function(){
cleveland <- readLines("data/cleveland.data")
matrix <- matro
for(line in cleveland){
print(strsplit(line, " "))
}
data <- list()
curr_row <- list()
lapply(cleveland, function(line){
line_split <- strsplit(line, " ")
if(line_split.contains("name")){
line_split.remove("name")
curr_row.append(line_split)
data.append(curr_row)
curr_row <- list()
} else {
curr_row.append(curr_row)
}
})
}
exploratoryAnalysis <- function(processed.cleveland) {
# Description of what the data looks like
head(processed.cleveland)
# Histogram of the variables
hist(processed.cleveland)
# Summary statistics of dataframe
summary(processed.cleveland)
}
backwardsSelection <- function(model){
backwards <- step(model,trace=0)
summary(backwards)
formula(backwards)
return(backwards)
}
residualDiagnostics <- function ()
cleveland <- formatUnprocessedClevelandData()
processed.cleveland <- formatProcessedClevelandData()
res.polr=polr(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal),data=processed.cleveland)
summary(res.polr)
backwardsSelection(res.polr)
## combined table
(ctable <- cbind(ctable, "p value" = p))
(ci <- confint(res.polr)) # default method gives profiled CIs
residuals.polr <- resids(res.polr)
residuals.polr.std <- (residuals.polr - mean(residuals.polr))/ sd(residuals.polr)
qqnorm(residuals.polr.std,
ylab="Standardized Residuals",
xlab="Normal Scores",
main="Old Faithful Eruptions")
## calculate and store p valuesfitted(res.polr)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
hist(residuals.polr)
(ctable <- coef(summary(res.polr)))
plot(residuals.polr)
res.clm=clm(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal), data=processed.cleveland)
summary(res.clm)
(res.clm.ctable <- coef(summary(res.clm)))
backwardsSelection(res.clm)
res.bracl <- bracl(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal), data = processed.cleveland,
parallel = TRUE, type = "ML")
summary(res.bracl)
(ctable.bracl <- coef(summary(res.bracl)))
backwardsSelection(res.bracl)
# Histogram of the variables
hist(processed.cleveland)
# Summary statistics of dataframe
summary(processed.cleveland)
summary(res.polr)
## combined table
(ctable <- cbind(ctable, "p value" = p))
residualDiagnostics <- function ()
cleveland <- formatUnprocessedClevelandData()
processed.cleveland <- formatProcessedClevelandData()
res.polr=polr(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal),data=processed.cleveland)
summary(res.polr)
(ctable <- coef(summary(res.polr)))
## calculate and store p valuesfitted(res.polr)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
?clm
?polr
res.bracl <- bracl(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal), data = processed.cleveland,
parallel = TRUE, type = "ML")
summary(res.bracl)
(ctable.bracl <- coef(summary(res.bracl)))
res.bracl <- bracl(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal), data = processed.cleveland,
parallel = TRUE, type = "ML")
summary(res.bracl)
summary(res.polr)
backwardsSelection(res.polr)
model <- res.polr
backwards <- step(model,trace=0)
summary(backwards)
(ctable <- coef(summary(model)))
## calculate and store p valuesfitted(res.polr)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
model
model
model <- res.polr
backwards <- step(model,trace=0)
(ctable <- coef(summary(model)))
summary(backwards)
(ctable <- coef(backwards))
## calculate and store p valuesfitted(res.polr)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
summary(backwards)
## combined table
(ctable <- cbind(ctable, "p value" = p))
<
model <- res.polr
backwards <- step(model,trace=0)
summary(backwards)
formula(backwards)
(ctable <- coef(backwards))
## calculate and store p valuesfitted(res.polr)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
formula(backwards)
summary(backwards)
formula(model)
summary(model)
residuals.polr <- resids(res.polr)
residuals.polr.std <- (residuals.polr - mean(residuals.polr))/ sd(residuals.polr)
hist(residuals.polr.std)
res.polr <- backwardsSelection(res.polr)
residuals.polr <- resids(res.polr)
residuals.polr.std <- (residuals.polr - mean(residuals.polr))/ sd(residuals.polr)
hist(residuals.polr.std)
plot(residuals.polr.std)
plot(main="Residual Plot", residuals.polr.std)
qqnorm(residuals.polr.std,
ylab="Standardized Residuals",
xlab="Normal Scores",
main="Old Faithful Eruptions")
qqnorm(residuals.polr.std,
ylab="Standardized Residuals",
xlab="Normal Scores",
main="REsiduals QQ")
qqnorm(residuals.polr.std,
ylab="Standardized Residuals",
xlab="Normal Scores",
main="Residuals QQ")
?resids
(ci <- confint(res.polr)) # default method gives profiled CIs
library(foreign)
library(ggplot2)
library(MASS)
library(Hmisc)
library(reshape2)
library(VGAM)
library(sure)
library(ordinal)
library(brglm2)
library("nnet")
library(boot)
source('~/Git-Projects/heart-disease-glm/utility.R')
source('utility.R')
cleveland <- formatUnprocessedClevelandData()
processed.cleveland <- formatProcessedClevelandData()
processed.cleveland
### Re-level variables and variable creation
processed.cleveland$num <- relevel(factor(processed.cleveland$num), ref = 1) # Reference: No Heart Disease
processed.cleveland$binary_num <- with(processed.cleveland, 1*(num != 0)) # BINARY RESPONSE VARIABLE: If any level of heart disease present (num > 0), set to 1
processed.cleveland$sex <- relevel(factor(processed.cleveland$sex), ref = 1) # Reference : Female
processed.cleveland$cp <- relevel(factor(processed.cleveland$cp), ref = 4) # Reference: asymptomatic chest pain
processed.cleveland$fbs <- relevel(factor(processed.cleveland$fbs), ref = 1) # Refernce: fasting blood sugar < 120 mg/dl
processed.cleveland$restecg <- relevel(factor(processed.cleveland$restecg), ref = 1) # Reference: Normal Rest ECG
processed.cleveland$exang <- relevel(factor(processed.cleveland$exang), ref = 1) # Reference: No exercise angina
processed.cleveland$slope <- relevel(factor(processed.cleveland$slope), ref = 2) # Reference: Flat
processed.cleveland$ca <- relevel(factor(processed.cleveland$ca), ref = 1) # Reference: 0 major vessels
processed.cleveland$thal <- relevel(factor(processed.cleveland$thal), ref = 1) # Reference: Normal
# Formulas
binomial.full.model <- binary_num ~ age + sex + cp + trestbps + chol + fbs + restecg + thalach + exang + oldpeak + slope + ca + thal
ordinal.full.model <- num ~ age + sex + cp + trestbps + chol + fbs + restecg + thalach + exang + oldpeak + slope + ca + thal
processed.cleveland.positive <- processed.cleveland[processed.cleveland$binary_num == 1,]
processed.cleveland.negative <- processed.cleveland[processed.cleveland$binary_num == 0,]
hist(processed.cleveland.positive$age, col=rgb(1,0,0,0.5), xlab="age (yrs)", main = "Age Distribution")
hist(processed.cleveland.negative$age, col=rgb(0,0,1,0.5), add=T)
legend("topright", c("Heart Disease", "Ho Heart Disease"), col=c("red", "blue"), lwd=10)
box()
hist(processed.cleveland.positive$trestbps, col=rgb(1,0,0,0.5), xlab="rate per minute", main = "Resting Heart Rate Distribution")
hist(processed.cleveland.negative$trestbps, col=rgb(0,0,1,0.5), add=T)
legend("topright", c("Heart Disease", "Ho Heart Disease"), col=c("red", "blue"), lwd=10)
box()
hist(processed.cleveland.positive$chol, col=rgb(1,0,0,0.5), xlab="mg/dl", main = "Cholestoral Level Distribution")
hist(processed.cleveland.negative$chol, col=rgb(0,0,1,0.5), add=T)
legend("topright", c("Heart Disease", "Ho Heart Disease"), col=c("red", "blue"), lwd=10)
box()
hist(processed.cleveland.positive$thalach, col=rgb(1,0,0,0.5), xlab="rate per minute", main = "Max Heart Rate Distribution")
hist(processed.cleveland.negative$thalach, col=rgb(0,0,1,0.5), add=T)
legend("topright", c("Heart Disease", "Ho Heart Disease"), col=c("red", "blue"), lwd=10)
box()
hist(processed.cleveland.positive$oldpeak, col=rgb(1,0,0,0.5), , xlab="ST Depression Induced by Exercise", main = "Old Peak Distribution")
hist(processed.cleveland.negative$oldpeak, col=rgb(0,0,1,0.5), add=T)
legend("topright", c("Heart Disease", "Ho Heart Disease"), col=c("red", "blue"), lwd=10)
box()
"
Binary logistic regression
- predictive performance metrics will be compared between this model and the best nominal/ordinal model
INTERPRETATION
-
"
res.binomial.full <- glm(binomial.full.model, family=binomial(link="logit"),data=processed.cleveland)
res.binomial.none <- glm(binary_num ~ 1,family=binomial(link="logit"),data=processed.cleveland)
res.binomial.backward <- backwardsSelection(res.binomial.full)
res.binomial.forward <- forwardsSelection(res.binomial.none)
summary(res.binomial.full)
summary(res.binomial.backward)
summary(res.binomial.forward)
formula(res.binomial.full)
formula(res.binomial.backward)
formula(res.binomial.forward)
res.binomial.backward.residuals.std <- rstandard(res.binomial.backward)
exp(res.binomial.backward$coefficients) # INTERPRETATION: Odds of getting heart disease
res.multinom.full <- multinom(ordinal.full.model, data=processed.cleveland)
summary(res.multinom.full)
res.multinom.full.backward <- backwardsSelection(res.multinom.full)
res.multinom.full.backward.residuals <- resid(res.multinom.full.backward)
summary(res.multinom.full.backward)
formula(res.multinom.full.backward)
exp(summary(res.multinom.full.backward)$coefficients) # INTERPRETATION: Odds of getting severity of heart disease relative to getting no heart disease
res.polr.full <- polr(ordinal.full.model, data=processed.cleveland)
summary(res.polr.full)
res.polr.full.backward <- backwardsSelection(res.polr.full)
res.polr.full.backward.residuals <- resids(res.polr.full.backward)
summary(res.polr.full.backward)
exp(res.polr.full.backward$coefficients) # INTERPRETATION: Odds of following into a heart disease severity or lower
